AWSTemplateFormatVersion: 2010-09-09

Description: >
  This Cloudformation Template creates five Compose enabled Docker Machines on EC2 Instances
  which are ready for Docker Swarm operations, using the AMI of Clarusway (ami-04bf6dcdc9ab498ca). 
  The AMI of Clarusway Compose enabled Docker Machine (clarusway-docker-machine-with-compose-amazon-linux-2)
  is published on North Virginia Region for educational purposes. 
  Docker Machines will run on Amazon Linux 2 with custom security group 
  allowing SSH (22), HTTP (80) and TCP(2377, 8080) connections from anywhere.
  User needs to select appropriate key name when launching the template.

Parameters:
  KeyPairName:
    Description: Enter the name of your Key Pair for SSH connections.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be one of the existing EC2 KeyPair

Resources:
  DockerMachinesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP for Docker Machines
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  DockerMachineGrandMaster:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04bf6dcdc9ab498ca
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: Grand-Master
      UserData:
        Fn::Base64: |
          #! /bin/bash
          yum update -y
          hostnamectl set-hostname Grand-Master 
          yum install git -y
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          cp /lib/systemd/system/docker.service /lib/systemd/system/docker.service.bak
          sed -i 's/^ExecStart=.*/ExecStart=\/usr\/bin\/dockerd -H tcp:\/\/127.0.0.1:2375 -H unix:\/\/\/var\/run\/docker.sock/g' /lib/systemd/system/docker.service
          systemctl daemon-reload
          systemctl restart docker
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          yum install python3 -y
          pip3 install ec2instanceconnectcli
          yum install amazon-ecr-credential-helper -y
          
          docker swarm init
          
          ******docker swarm join --token <worker_token> <manager_ip>:2377

          ******docker swarm join-token manager
          
          docker service create \
            --name=viz \
            --publish=8080:8080/tcp \
            ***--constraint=node.role==manager \
            --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/ \ docker.sock dockersamples/visualizer
          
          ******docker service create --name glbserver --mode=global -p \ 80:80 alpine

                   
  DockerMachine2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04bf6dcdc9ab498ca
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Machine 2nd of ${AWS::StackName} 
  DockerMachine3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04bf6dcdc9ab498ca
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Machine 3rd of ${AWS::StackName} 
  DockerMachine4:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04bf6dcdc9ab498ca
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Machine 4th of ${AWS::StackName} 
  DockerMachine5:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04bf6dcdc9ab498ca
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Machine 5th of ${AWS::StackName} 
Outputs:
  1stDockerMachineDNSName:
    Description: Docker Machine 1st DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerMachine1.PublicDnsName
  2ndDockerMachineDNSName:
    Description: Docker Machine 2nd DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerMachine2.PublicDnsName
  3rdDockerMachineDNSName:
    Description: Docker Machine 3rd DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerMachine3.PublicDnsName
  4thDockerMachineDNSName:
    Description: Docker Machine 4th DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerMachine4.PublicDnsName
  5thDockerMachineDNSName:
    Description: Docker Machine 5th DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerMachine5.PublicDnsName
  