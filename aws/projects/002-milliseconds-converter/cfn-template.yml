AWSTemplateFormatVersion: 2010-09-09
Description: |
  The Milliseconds Converter Application aims to convert the given time in milliseconds into hours, minutes, and seconds. The application is to be coded in Python and deployed as a web application with Flask on AWS Application Load Balancer with Auto Scaling Group of Elastic Compute Cloud (EC2) Instances using AWS Cloudformation Service.
Parameters:
  
Mappings:
  
Conditions:
  
Resources:
  
  MiliAutoScalingGrp:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs 
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90 seconds
      HealthCheckType: ELB
      InstanceId: String
      #LaunchConfigurationName: String
      LaunchTemplate: !Ref MiliLaunchTemp
      #LifecycleHookSpecificationList:
      #  - LifecycleHookSpecification
      LoadBalancerNames:
        - String
      MaxInstanceLifetime: Integer
      MaxSize: 3 #required
      #MetricsCollection:
      #  - MetricsCollection
      MinSize: 1 #required
      MixedInstancesPolicy:
        MixedInstancesPolicy
      NewInstancesProtectedFromScaleIn: Boolean
      NotificationConfigurations:
        - NotificationConfiguration
      PlacementGroup: String
      ServiceLinkedRoleARN: String
      Tags:
        - TagProperty
      TargetGroupARNs:
        - String
      TerminationPolicies:
        - String
      VPCZoneIdentifier:
        - String
  
  MiliLaunchTemp:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        !Ref MiliWebServerHost
  

  MiliWebServerHost:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: ami-007a607c4abd192db
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchTemplate:
        LaunchTemplateSpecification
      SecurityGroupIds:
        - !Ref MiliSecGrp
      #SecurityGroups:
      #  - String
      #SourceDestCheck: Boolean
      #SsmAssociations:
      #  - SsmAssociation
      #SubnetId: String
      Tags:
        - Key: Name
          Value: Web Server of ${AWS::StackName} Stack
      UserData: 
      

  MiliAutoScalingPol:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      #AdjustmentType: String
      AutoScalingGroupName: COME BACK
      #Cooldown: String
      #EstimatedInstanceWarmup: Integer
      #MetricAggregationType: String
      #MinAdjustmentMagnitude: Integer
      PolicyType: TargetTrackingScaling
      #ScalingAdjustment: Integer
      #StepAdjustments:
      # - StepAdjustment
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: COME BACK
  
  
  MiliLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !GetAtt MiliSecGrp.GroupId
      Subnets:
        - COME BACK

  
  MiliListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - Type: forward
          TargetGroupArn: !Ref MiliTargetGrp
      LoadBalancerArn: !Ref MiliLoadBalancer
      Port: 80
      Protocol: HTTP
                                              

  MiliTargetGrp:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 25
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: COME BACK
  
  
  MiliSecGrp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: enables SSH and HTTP #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Tag
        
Outputs: