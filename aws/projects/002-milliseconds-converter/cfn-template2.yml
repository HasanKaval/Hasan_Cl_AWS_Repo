AWSTemplateFormatVersion: 2010-09-09
Description: |
  CloudFormation Template for Miliseconds Converter Application. This template creates Python Flask Web Application on Amazon Linux 2 ( ami-0947d2ba12ee1ff75) EC2 Instance with custom security group allowing http connections on port 80.
  Miliseconds Converter Application is downloaded from Github repository, then installed on Flask.
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t1.micro
      - m1.small
      - m1.medium
      - m1.large
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  PolicyTargetValue:
    Description: Please enter your Target value that triggers the Autoscaling
    Default: '60'
    Type: String
  
Mappings:
  RegionImageMap:
    us-east-1:
      AMI: ami-0947d2ba12ee1ff75
    us-east-2:
      AMI: ami-03657b56516ab7912
    us-west-1:
      AMI: ami-0e4035ae3f70c400f
    us-west-2:
      AMI: ami-01fee56b22f308154
    
Resources:
 
  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs 
      LaunchConfigurationName: !Ref myLaunchConfig
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      DesiredCapacity: "2"
      MinSize: '1'
      MaxSize: '3'
      TargetGroupARNs:
        - !Ref myALBTargetGroup
  
  myLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - RegionImageMap
        - !Ref AWS::Region
        - AMI
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y
            yum install python3 -y
            pip3 install flask
            cd /home/ec2-user
            wget https://raw.githubusercontent.com/nsaylan/Clarusway-aws-devops-workshop/master/aws/projects/002-milliseconds-converter/app.py
            wget -P templates https://raw.githubusercontent.com/nsaylan/Clarusway-aws-devops-workshop/master/aws/projects/002-milliseconds-converter/templates/index.html
            wget -P templates https://raw.githubusercontent.com/nsaylan/Clarusway-aws-devops-workshop/master/aws/projects/002-milliseconds-converter/templates/result.html
            python3 app.py
      SecurityGroups:
        - !Ref mySecurityGroup
      InstanceType: !Ref InstanceType
  
  myCPUPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref myAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref PolicyTargetValue
  

  myApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !GetAtt mySecurityGroup.GroupId
      Subnets: !Ref Subnets
       
  

  myALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref myALBTargetGroup
      LoadBalancerArn: !Ref myApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  
  myALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 25
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  
  
  mySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enables SSH and HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          
    
  
Outputs:
  URL:
    Description: The URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt myApplicationLoadBalancer.DNSName
